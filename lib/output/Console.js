/**
 * @file
 * Defines the Core.cli.output.Console class.
 *
 * @author Luke Chavers <me@lukechavers.com>
 * @version 1.0
 * @copyright 2019 C2C Schools, LLC
 * @license MIT
 */

"use strict";

/* eslint no-console: "off" */

// Load dependencies using the Core Framework
const { _, CHALK, SYMBOLS, BOXEN, TABLE, TIPE } = Core.deps( "_", "chalk", "symbols", "boxen", "table", "tipe" );

// A few constants
const INDENTATION_CHARACTER = "    ";
const SYMBOL_PADDING_RIGHT  = " ";
const CONSOLE_WIDTH         = 120;		// todo: this can be resolved...
const DIV_CHARACTER         = "â”€";

/**
 * Facilitates CLI output to the console.
 *
 * @memberOf Core.cli.output
 * @extends Core.cli.output.Base
 */
class Console extends Core.cls( "Core.cli.output.Base" ) {

	/**
	 * Outputs a single, unformatted, line of text.  This method is a drop-in
	 * replacement for `console.log`, to which this method forwards its arguments.
	 *
	 * @public
	 * @returns {void}
	 */
	log() {
		console.log.apply( null, arguments );
	}

	/**
	 * Outputs one or more blank lines.
	 *
	 * @public
	 * @param {Number} [count=1] - The number of blank lines to output.
	 * @returns {void}
	 */
	blank( count = 1 ) {

		// Locals
		let me = this;

		// Output the lines
		for( let i = 0; i < count; i++ ) {
			me.log( " " );
		}

	}

	/**
	 * Outputs a dividing line.
	 *
	 * @public
	 * @returns {void}
	 */
	div() {

		this.blank( 2 );
		this.color( _.repeat( DIV_CHARACTER, CONSOLE_WIDTH ), "grey", true );
		this.blank( 2 );

	}

	/**
	 * Displays a list item, prefixed with a bullet.
	 *
	 * @public
	 * @see https://www.npmjs.com/package/figures
	 * @see https://yyhappynice.github.io/node-symbols
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} text - The text to display after the bullet.
	 * @param {number} [indent=1] - The amount to indent before the bullet (see the `indent()` method for more info)
	 * @param {string} [textColor="white"] - The color the text should be.  The value passed for this parameter will
	 * be passed, verbatim, to the `chalk` library, except for the literal value of "white" (default), which will
	 * result in an uncolored string.
	 * @param {string} [bulletColor="green"] - The color that the bullet should be. The value passed for this parameter
	 * will be passed, verbatim, to the `node-symbols` library, which, in-turn, will send the value to the `chalk` library.
	 * @param {boolean} [output=true] - When TRUE (default), the output string generated by this method will be sent to
	 * the output handler. Otherwise, this method will not send anything to the output handler.
	 * @returns {string} The bullet and text string that was generated.
	 */
	bullet( text, indent = 1, textColor = "white", bulletColor = "green", output = true ) {
		return this.symbolAndText( "bullet", text, indent, textColor, bulletColor, output );
	}

	/**
	 * Displays a list item, prefixed with a star.
	 *
	 * @public
	 * @see https://www.npmjs.com/package/figures
	 * @see https://yyhappynice.github.io/node-symbols
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} text - The text to display after the bullet.
	 * @param {number} [indent=1] - The amount to indent before the bullet (see the `indent()` method for more info)
	 * @param {string} [textColor="white"] - The color the text should be.  The value passed for this parameter will
	 * be passed, verbatim, to the `chalk` library, except for the literal value of "white" (default), which will
	 * result in an uncolored string.
	 * @param {string} [bulletColor="green"] - The color that the bullet should be. The value passed for this parameter
	 * will be passed, verbatim, to the `node-symbols` library, which, in-turn, will send the value to the `chalk` library.
	 * @param {boolean} [output=true] - When TRUE (default), the output string generated by this method will be sent to
	 * the output handler. Otherwise, this method will not send anything to the output handler.
	 * @returns {string} The bullet and text string that was generated.
	 */
	star( text, indent = 1, textColor = "white", bulletColor = "green", output = true ) {
		return this.symbolAndText( "star", text, indent, textColor, bulletColor, output );
	}

	/**
	 * Displays a list item, prefixed with a chevron.
	 *
	 * @public
	 * @see https://www.npmjs.com/package/figures
	 * @see https://yyhappynice.github.io/node-symbols
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} text - The text to display after the bullet.
	 * @param {number} [indent=1] - The amount to indent before the bullet (see the `indent()` method for more info)
	 * @param {string} [textColor="white"] - The color the text should be.  The value passed for this parameter will
	 * be passed, verbatim, to the `chalk` library, except for the literal value of "white" (default), which will
	 * result in an uncolored string.
	 * @param {string} [bulletColor="green"] - The color that the bullet should be. The value passed for this parameter
	 * will be passed, verbatim, to the `node-symbols` library, which, in-turn, will send the value to the `chalk` library.
	 * @param {boolean} [output=true] - When TRUE (default), the output string generated by this method will be sent to
	 * the output handler. Otherwise, this method will not send anything to the output handler.
	 * @returns {string} The bullet and text string that was generated.
	 */
	chevron( text, indent = 1, textColor = "white", bulletColor = "green", output = true ) {
		return this.symbolAndText( "pointer", text, indent, textColor, bulletColor, output );
	}

	/**
	 * Generates a symbol. This method wraps the functionality of the `node-symbols` library, which, itself, wraps the
	 * `figures` library.
	 *
	 * @public
	 * @see https://www.npmjs.com/package/figures
	 * @see https://yyhappynice.github.io/node-symbols
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} symbol - The name of the symbol to generate.
	 * @param {string} [color="green"] - The color that the bullet should be. The value passed for this parameter
	 * will be passed, verbatim, to the `node-symbols` library, which, in-turn, will send the value to the `chalk`
	 * library.
	 * @param {boolean} [output=false] - When FALSE (default), the output string generated by this method WILL NOT
	 * be sent to the output handler. Otherwise, this method will send the symbol to the output handler.
	 * @returns {string} The generated symbol.
	 */
	symbol( symbol, color = "green", output = false ) {

		// Defer to the `node-symbols` library
		let ret = SYMBOLS( symbol, color );

		// Output, if desired
		if( output ) {
			this.log( ret );
		}

		// Return
		return ret;

	}

	/**
	 * Displays symbol followed by some text.
	 *
	 * @public
	 * @see https://www.npmjs.com/package/figures
	 * @see https://yyhappynice.github.io/node-symbols
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} symbol - The name of the symbol to display.
	 * @param {string} text - The text to display after the symbol.
	 * @param {number} [indent=1] - The amount to indent before the bullet (see the `indent()` method for more info)
	 * @param {string} [textColor="white"] - The color the text should be.  The value passed for this parameter will
	 * be passed, verbatim, to the `chalk` library, except for the literal value of "white" (default), which will
	 * result in an uncolored string.
	 * @param {string} [symbolColor="green"] - The color that the symbol should be. The value passed for this parameter
	 * will be passed, verbatim, to the `node-symbols` library, which, in-turn, will send the value to the `chalk` library.
	 * @param {boolean} [output=true] - When TRUE (default), the output string generated by this method will be sent to
	 * the output handler. Otherwise, this method will not send anything to the output handler.
	 * @returns {string} The symbol and text string that was generated.
	 */
	symbolAndText( symbol, text, indent = 1, textColor = "white", symbolColor = "green", output = true ) {

		// Locals
		let me = this;

		// Construct the line
		let sym = me.symbol( symbol, symbolColor, false );

		// Apply text coloring
		let coloredText = me.color( text, textColor, false );

		// Combine
		let ret = sym + SYMBOL_PADDING_RIGHT + coloredText;

		// Indent
		ret = me.indent( ret, indent, false, null );

		// Output, if desired
		if( output ) {
			me.log( ret );
		}

		// Return
		return ret;

	}

	/**
	 * Colors a string using the `chalk` library.
	 *
	 * @public
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} str - The string/text to color.
	 * @param {string} [color="white"] - The color to use when coloring the string.  The value passed for this
	 * parameter will be passed, verbatim, to the `chalk` library, except for the literal value of "white" (default),
	 * which will result in an uncolored string.
	 * @param {boolean} [output=false] - When FALSE (default), the output string generated by this method WILL NOT
	 * be sent to the output handler. Otherwise, this method will send the symbol to the output handler.
	 * @returns {string} The colored string.
	 */
	color( str, color = "white", output = false ) {

		// Locals
		let me = this;
		let ret;

		// Defer to the `chalk` library
		if( color !== "white" ) {
			return me._chalk( str, color, output );
		} else {
			ret = str;
		}

		// Output, if desired
		if( output ) {
			me.log( ret );
		}

		// Return
		return ret;

	}

	/**
	 * Colors the background a string using the `chalk` library.
	 *
	 * @public
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} str - The string/text to color.
	 * @param {string} [bgColor="black"] - The background color to use when coloring the string.  The value passed for this
	 * parameter will be passed, verbatim, to the `chalk` library.
	 * @param {boolean} [output=false] - When FALSE (default), the output string generated by this method WILL NOT
	 * be sent to the output handler. Otherwise, this method will send the symbol to the output handler.
	 * @returns {string} The colored string.
	 */
	bg( str, bgColor = "black", output = false ) {

		// Translate the color
		let functionName = "bg" + bgColor.substr( 0, 1 ).toUpperCase() + bgColor.substr( 1 );

		// Defer to the chalk function wrapper.
		return this._chalk( str, functionName, output );

	}

	/**
	 * Wraps the `chalk` library by translating the `functionName` parameter into a `chalk` function call.
	 *
	 * @private
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} str - The string/text to pass to the specified `chalk` function.
	 * @param {string|string[]} [functionName="white"] - The name of the `chalk` function to call. This param
	 * will also accept an array of strings (or a comma delimited string, which will be converted to an array).
	 * In either case, this function will recursively process each 'functionName' in the list, from first to last.
	 * @param {boolean} [output=false] - When FALSE (default), the output string generated by this method WILL NOT
	 * be sent to the output handler. Otherwise, this method will send the symbol to the output handler.
	 * @returns {string} The string returned by `chalk`.
	 */
	_chalk( str, functionName = "red", output = false ) {

		// Locals
		let me = this;

		// If the `functionName` contains commas, then we'll
		// convert it to an array..
		if( TIPE( functionName ) === "string" && functionName.indexOf( "," ) !== -1 ) {
			functionName = functionName.split( "," );
		}

		// If functionName is an array, we may
		// need to process it recursively.
		if( TIPE( functionName ) === "array" ) {

			// We'll keep the LAST array element for use by this _chalk call
			let tmpLastFunction = functionName.pop();
			let otherFunctions  = functionName;

			// Let's see if we need to drill down..
			if( otherFunctions.length > 0 ) {
				str = me._chalk( str, otherFunctions, false );
			}

			// Now store the last function back in `functionName`
			functionName = tmpLastFunction;

		}

		// Trim
		functionName = _.trim( functionName );

		// Error if the function is invalid
		if( TIPE( CHALK[ functionName ] ) !== "function" ) {
			throw new Error( `Invalid Chalk function: '${functionName}'` );
		}

		// Defer to the `chalk` library
		let ret = CHALK[ functionName ]( str );

		// Output, if desired
		if( output ) {
			me.log( ret );
		}

		// Return
		return ret;

	}

	/**
	 * Underlines a string using the `chalk` library.
	 *
	 * @public
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} str - The string/text to color.
	 * @param {boolean} [output=false] - When FALSE (default), the output string generated by this method WILL NOT
	 * be sent to the output handler. Otherwise, this method will send the symbol to the output handler.
	 * @returns {string} The colored string.
	 */
	underline( str, output = false ) {
		return this._chalk( str, "underline", output );
	}

	/**
	 * Makes the provided `str` bold (or bright)
	 *
	 * @public
	 * @see https://github.com/chalk/chalk#readme
	 * @param {string} str - The string/text to bolden.
	 * @param {boolean} [output=false] - When FALSE (default), the output string generated by this method WILL NOT
	 * be sent to the output handler. Otherwise, this method will send the symbol to the output handler.
	 * @returns {string} The colored string.
	 */
	bold( str, output = false ) {
		return this._chalk( str, "bold", output );
	}

	/**
	 * Adds indentation to the start of the provided string (using the indentation character defined by the
	 * `INDENTATION_CHARACTER` constant, unless overridden)
	 *
	 * @param {string} str - The string to indent.
	 * @param {number} [amount=1] - The amount to indent. This is NOT the number of characters that will be added
	 * to the start of the string, but, rather, the number of times that `INDENTATION_CHARACTER` will be added, which
	 * may be multiple characters.
	 * @param {boolean} [output=false] - When FALSE (default), the output string generated by this method WILL NOT
	 * be sent to the output handler. Otherwise, this method will send the symbol to the output handler.
	 * @param {?string} [indentationCharacter=null] - An optional override for the `INDENTATION_CHARACTER` constant,
	 * which will be used for indentation. Pass NULL (default) to use the default string defined by `INDENTATION_CHARACTER`.
	 * @returns {string} The indented string.
	 */
	indent( str, amount = 1, output = false, indentationCharacter = null ) {

		// Locals
		let me = this;
		let ret; let indentStr;

		// Apply the indentation character override,
		// or use the default defined at the top of the file.
		if( !indentationCharacter ) {
			indentationCharacter = INDENTATION_CHARACTER;
		}

		// Build the indentation string
		if( amount >= 1 ) {
			indentStr = _.repeat( indentationCharacter, amount );
		}

		// Combine
		ret = indentStr + str;

		// Output, if desired
		if( output ) {
			me.log( ret );
		}

		// Return
		return ret;

	}

	/**
	 * A simple debugging/testing function that shows all symbols supported by the `figures` library.
	 *
	 * @private
	 * @returns {void}
	 */
	_displayAllSymbols() {

		// Locals
		let me = this;

		// Define all symbols
		let s = [ "tick", "cross", "star", "square", "squareSmall",
			"squareSmallFilled", "play", "circle", "circleFilled", "circleDotted",
			"circleDouble", "circleCircle", "circleCross", "circlePipe", "circleQuestionMark",
			"bullet", "dot", "line", "ellipsis", "pointer", "pointerSmall", "info", "warning",
			"hamburger", "smiley", "mustache", "heart", "arrowUp", "arrowDown", "arrowLeft",
			"arrowRight", "radioOn", "radioOff", "checkboxOn", "checkboxOff", "checkboxCircleOn",
			"checkboxCircleOff", "questionMarkPrefix", "oneHalf", "oneThird", "oneQuarter", "oneFifth",
			"oneSixth", "oneSeventh", "oneEighth", "oneNinth", "oneTenth", "twoThirds", "twoFifths",
			"threeQuarters", "threeFifths", "threeEighths", "fourFifths", "fiveSixths", "fiveEighths",
			"sevenEighths"
		];

		_.each( s, function( x ) {
			me.symbolAndText( x, x );
		} );

	}

	/**
	 * Outputs one or more lines of text encapsulated in a box. This method is used to display the XCC heading
	 * which includes version information.
	 *
	 * @public
	 * @param {string} str - The text to output.
	 * @param {boolean} [output=true] - When TRUE (default) the generated string will be output; otherwise, the string
	 * will be returned but will not be output.
	 * @returns {string} The generated string.
	 */
	greet( str, output = true ) {

		// Locals
		let me = this;

		let margin = {
			top    : 2,
			bottom : 1,
			left   : 0,
			right  : 0
		};

		let padding = 1;
		let align = "center";

		let ret = me.box( str, margin, padding, align, false );

		ret = me._bgLines( ret, "black" );

		if( output ) {
			me.log( ret );
		}

		return ret;

	}

	/**
	 * Sets a background color for one or more lines of text.
	 *
	 * @private
	 * @param {string} str - The string to add a background color to.
	 * @param {string} bgColor - The color for the background being added.
	 * @param {boolean} [output=true] - When TRUE (default) the generated string will be output; otherwise, the string
	 * will be returned but will not be output.
	 * @returns {string} The generated string.
	 */
	_bgLines( str, bgColor = "grey", output = false ) {

		// Locals
		let me = this;
		let arr = [];

		// Iterate over each line..
		_.each( str.split( "\n" ), function( line ) {

			if( !_.isEmpty( line ) ) {
				line = me.bg( line, bgColor, false );
				//line = CHALK.bgRgb( 100, 100, 100 );
			}

			arr.push( line );

		} );

		// Convert back to string
		let ret = arr.join( "\n" );

		// Output, if desired
		if( output ) {
			me.log( ret );
		}

		// All done.
		return ret;

	}

	/**
	 * Draws a box around a provided string using the `boxen` module/library.
	 *
	 * @public
	 * @param {string} str - The string to surround with a box.
	 * @param {number} [margin=0] - When specified and greater than zero, a margin will be added outside of the box.
	 * @param {number} [padding=0] - When specified and greater than zero, padding will be added inside of the box.
	 * @param {string} [align="left"] - Indicates how the text should be aligned within the box.
	 * @param {boolean} [output=true] - When TRUE (default) the generated string will be output; otherwise, the string
	 * will be returned but will not be output.
	 * @returns {string} The generated string.
	 */
	box( str, margin = 0, padding = 0, align = "left", output = true ) {

		// Locals
		let me = this;

		// Defer to the `boxen` library
		let ret = BOXEN( str, { align, margin, padding } );

		// Output, if desired.
		if( output ) {
			me.log( ret );
		}

		// All done.
		return ret;

	}

}

module.exports = Console;
